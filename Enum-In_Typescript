What is Enum? 
The short form of enumeration is enum.
It is used as a type with some set of values called a named constant.
Inernally it holds numeric type values or in some cases we can create heterogeneous enums.
The enum keyword is used to define the enums.
We can create a distinct case so it makes it easy to document.
It forces us to use all possible values.
Access the enums using index or use dot operator after the enum name & named constant.
Initial value starts from 0 if we do not set any value.
Auto incremental is the best approach to use because we do not need to worry about the values

Syntax: 
enum enumName{  
constant1, constant2, constant3...  
}  

1) We can access the elements using index or by constant name:

Example
enum signalLights{  
   red, yellow, green  
}  
let result: string = signalLights[signalLights.red];  
console.log(result);  
console.log(signalLights[1]);  
let output: signalLights = (<any>signalLights)["yellow"];  
console.log(output);  

Output 
red
yellow
1

Types of enums
 
A) Numeric enum
It is commonly used in all languages.
Initial value starts from 0 if we do not set any value.
Takes only numeric values.
enum keyword is used to declare the numeric type enum.
We can assign any value as per our requirements.
If our function returns any numeric value then we can use this function to initialize the constant.
Consider that in the below rainbowColors is enum & we have not initialized any constants, so it will starts with 0 value and the rest of the constants have auto increamemtal values.

Example:
enum rainbowColors {  
    Red,  
    Orange,  
    Yellow,  
    Green,  
    Blue,  
    Indigo,  
    Violet,  
}  
console.log("color & index value is as follows");  
for (let item in rainbowColors) {  
    if (isNaN(Number(item))) {  
        console.log(item + " : " + < rainbowColors > rainbowColors[item]);  
    }  
} 
